{"version":3,"sources":["assets/noPosterSmall.png","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Header.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","div","_templateObject","Title","span","_templateObject2","Grid","_templateObject3","Section","_ref","title","children","react_default","a","createElement","Loader_templateObject","Loader","Loader_Container","role","aria-label","Message_templateObject","Text","Message_templateObject2","props","color","Message","text","Message_Container","Poster_templateObject","Image","Poster_templateObject2","bgUrl","Rating","Poster_templateObject3","ImageContainer","_templateObject4","_templateObject5","Year","_templateObject6","Poster","id","imageUrl","rating","year","_ref$isMovie","isMovie","react_router_dom","to","concat","Poster_Container","require","Poster_Title","length","substring","HomePresenter_templateObject","HomePresenter","nowPlaying","upcoming","popular","loading","error","react","Helmet_default","HomePresenter_Container","Components_Section","map","movie","Components_Poster","key","original_title","poster_path","vote_average","release_date","Components_Message","api","axios","create","baseURL","params","api_key","language","moviesApi","get","movieDetail","append_to_response","search","term","query","encodeURIComponent","tvApi","topRated","airingToday","showDetail","HomeContainer","state","componentDidMount","_callee","_ref2","_ref3","_ref4","regenerator_default","wrap","_context","prev","next","sent","data","results","_this","setState","t0","finish","stop","_this$state","this","console","log","Home_HomePresenter","React","Component","TVPresenter_templateObject","TVPresenter","TVPresenter_Container","show","original_name","first_air_date","TVContainer","TV_TVPresenter","SearchPresenter_templateObject","Form","form","SearchPresenter_templateObject2","Input","input","SearchPresenter_templateObject3","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","SearchPresenter_Container","onSubmit","placeholder","value","onChange","SearchContainer","_handleSubmit","e","preventDefault","_searchByTerm","_updateTerm","target","Search_SearchPresenter","DetailPresenter_templateObject","Backdrop","DetailPresenter_templateObject2","bgImage","Content","DetailPresenter_templateObject3","Cover","DetailPresenter_templateObject4","Data","DetailPresenter_templateObject5","h3","DetailPresenter_templateObject6","ItemContainer","_templateObject7","Item","_templateObject8","Divider","_templateObject9","Overview","_templateObject10","DetailPresenter","result","DetailPresenter_Container","backdrop_path","DetailPresenter_Title","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","_default","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","mark","_this$props","push","parsedId","match","history","parseInt","isNaN","abrupt","pathname","location","includes","Detail_DetailPresenter","Header","header","Header_templateObject","List","ul","Header_templateObject2","li","Header_templateObject3","current","SLink","Link","Header_templateObject4","withRouter","Header_Item","Router","Components_Header","react_router","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","GlobalStyles_templateObject","reset","App","GlobalStyles","ReactDOM","render","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.1e25cb33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.87a0eb6a.png\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    margin-top:20px;\n    :not(:last-child) {\n        margin-bottom: 50px;\n    }\n`;\nconst Title = styled.span`\n    font-size: 14px;\n    font-weight: 600;\n`;\nconst Grid = styled.div`\n    margin-top: 25px;\n    display:grid;\n    grid-template-columns:repeat(auto-fill, 125px);\n    grid-gap:25px;\n`;\n\n//children이란, 부모컴포넌트에서 받는 , 태그 사이에 있는 데이터.\nconst Section = ({ title, children }) => (\n  <Container>\n    <Title>{title}</Title>\n    <Grid>{children}</Grid>\n  </Container>\n\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ])\n};\n\nexport default Section;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  margin-top: 20px;\n`;\n\nexport default () => (\n  <Container>\n    <span role=\"img\" aria-label=\"Loading\">\n      ⏰\n    </span>\n  </Container>\n);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Text = styled.span`\n  color: ${props => props.color};\n`;\n\nconst Message = ({ text, color }) => (\n  <Container>\n    <Text color={color}>{text}</Text>\n  </Container>\n);\n\nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired\n};\n\nexport default Message;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  font-size: 12px;\n`;\n\nconst Image = styled.div`\n  background-image: url(${props => props.bgUrl});\n  height: 180px;\n  background-size: cover;\n  border-radius: 4px;\n  background-position: center center;\n  transition: opacity 0.1s linear;\n`;\nconst Rating = styled.span`\n  bottom: 5px; right: 5px;\n  position: absolute;\n  opacity: 0;\n  transition: opacity 0.1s linear;\n`;\nconst ImageContainer = styled.div`\n  margin-bottom: 5px;\n  position: relative;\n  &:hover {\n    ${Image} {\n      opacity: 0.3;\n    }\n    ${Rating} {\n      opacity: 1;\n    }\n  }\n`;\nconst Title = styled.span`\n  display: block;\n  margin-bottom: 3px;\n`;\nconst Year = styled.span`\n  font-size: 10px;\n  color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\n    <Container>\n      <ImageContainer>\n        <Image\n        bgUrl={\n            imageUrl\n            ? `https://image.tmdb.org/t/p/w300${imageUrl}`\n            : require(\"../assets/noPosterSmall.png\")\n        }/>\n        <Rating>\n          <span role=\"img\" aria-label=\"rating\">⭐️</span>{\" \"}\n          {rating}/10\n        </Rating>\n      </ImageContainer>\n        <Title>\n        {title.length > 18 ? `${title.substring(0, 18)}...` : title}\n        </Title>\n      <Year>{year}</Year>\n    </Container>\n  </Link>\n);\n\nPoster.propTypes = {\n  id: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  rating: PropTypes.number,\n  year: PropTypes.string,\n  isMovie: PropTypes.bool\n};\n\nexport default Poster;","//데이터를 보여주기만 하는 스타일 컴포넌트 (functional component)\nimport React,{Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Section from \"Components/Section\";\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\nimport Helmet from 'react-helmet';\n\nconst Container = styled.div`\n  padding: 20px;\n`;\n\n//로딩중일땐, 안보여주다가, 로딩끝나면 container보여줌\n//section 사이에 맵핑된 데이터가 children으로 section 컴포넌트에게 전달됨.\nconst HomePresenter = ({nowPlaying, upcoming, popular, loading, error}) => \n<Fragment>\n  <Helmet>\n    <title>Movies | Nomflix</title>\n  </Helmet>\n  {loading ? (<Loader />) : (\n      <Container>\n      {nowPlaying && nowPlaying.length > 0 && (\n        <Section title=\"Now Playing\">\n          {nowPlaying.map(movie => (\n            <Poster \n            key={movie.id}\n            id={movie.id}\n            title={movie.original_title}\n            imageUrl={movie.poster_path}\n            rating={movie.vote_average}\n            //date가 있을때만 substring하도록 하는 코드\n            year={movie.release_date && movie.release_date.substring(0,4)}\n            isMovie={true}\n            />\n            ))}\n        </Section>\n      )}\n      {upcoming && upcoming.length > 0 && (\n        <Section title=\"Upcoming Movies\">\n          {upcoming.map(movie => (\n            <Poster \n            key={movie.id}\n            id={movie.id}\n            title={movie.original_title}\n            imageUrl={movie.poster_path}\n            rating={movie.vote_average}\n            //date가 있을때만 substring하도록 하는 코드\n            year={movie.release_date && movie.release_date.substring(0,4)}\n            isMovie={true}\n            />\n            ))}\n        </Section>\n      )}\n      {popular && popular.length > 0 && (\n        <Section title=\"Popular Movies\">\n          {popular.map(movie => (\n            <Poster \n            key={movie.id}\n            id={movie.id}\n            title={movie.original_title}\n            imageUrl={movie.poster_path}\n            rating={movie.vote_average}\n            //date가 있을때만 substring하도록 하는 코드\n            year={movie.release_date && movie.release_date.substring(0,4)}\n            isMovie={true}\n            />\n            ))}\n        </Section>\n      )}\n      {error && <Message color=\"#F0483C\" text={error}/>}\n    </Container>  \n  )}\n</Fragment>;\n\n\nHomePresenter.propTypes = {\n    nowPlaying:PropTypes.array,\n    upcoming:PropTypes.array,\n    popular:PropTypes.array,\n    loading:PropTypes.bool.isRequired,\n    error:PropTypes.string\n};\n\nexport default HomePresenter ;","//fetch 대신에 axios 사용하면, api요청이 간편해진다.\nimport axios from 'axios';\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n      api_key: \"66c22bbba3769028cbf16b9dc73f35f5\",\n      language: \"en-US\"\n    }\n});\n\n//encodeURIComponent()는 \n//query:Pass a text 'query' to search. This value should be 'URI encoded'.\nexport const moviesApi = {\n    nowPlaying: () => api.get(\"movie/now_playing\"),\n    upcoming: () => api.get(\"movie/upcoming\"),\n    popular: () => api.get(\"movie/popular\"),\n    movieDetail: (id) => api.get(`movie/${id}`,{\n        params:{\n            append_to_response: \"videos\"\n        }\n    }),\n    search: (term) => api.get(\"search/movie\", {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n  \nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: (id) => api.get(`tv/${id}`,{\n        params:{\n            append_to_response: \"videos\"\n        }\n    }),\n    search: (term) => api.get(\"search/tv\", {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n\n\n//api.get(\"movie/now_playing\");\n//일다 ㄴnetwork에서 api가져온 결과를 확인할 수 있다.","import HomeContainer from './HomeContainer'\n\nexport default HomeContainer;","//container : data를 다루는 컴포넌트\n//mount 이후에 api 불러오고, state를 가진 메인 컴포넌트\n\nimport React from 'react';\nimport HomePresenter from './HomePresenter';\nimport {moviesApi} from 'api';\n\n\nexport default class extends React.Component {\n    state = {\n        nowPlaying:null,\n        upcoming:null,\n        popular:null,\n        error:null,\n        loading:true,\n    }\n\n    componentDidMount = async() =>{\n        try{\n            //await해줘야 자바스크립트가 뒤에 요청을 기다려준다.\n            //data 안에 results 배열 가져옴 > nowPlaying 으로 이름변경 > setState!\n            const {data:{results : nowPlaying}} = await moviesApi.nowPlaying();\n            const {data:{results : upcoming}} = await moviesApi.upcoming();\n            const {data:{results : popular}} = await moviesApi.popular();\n            \n            this.setState({\n                nowPlaying,\n                upcoming,\n                popular\n            });\n        }catch{\n            this.setState({\n                error:\"Can't find movies information.\"\n            })\n        }finally{\n            //리스트보여주기 or 에러문구 보여주기\n            this.setState({\n                loading:false\n            });\n        }\n    }\n    render() {\n        const {nowPlaying, upcoming, popular, error, loading} = this.state;\n        console.log(this.state);\n        return (\n            <HomePresenter \n            nowPlaying={nowPlaying}\n            upcoming={upcoming}\n            popular={popular}\n            error={error}\n            loading={loading}\n            />\n        );\n    }\n}\n\n","import React,{Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Section from 'Components/Section';\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\nimport Helmet from 'react-helmet';\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n//container 컴포넌트에서 try(api) > catch(error) > finally(loading:false) 된다.\nconst TVPresenter = ({topRated, popular, airingToday, loading, error}) => \n<Fragment>\n    <Helmet>\n        <title>TV | Nomflix</title>\n    </Helmet>\n    {loading ? (<Loader />) : (\n        <Container>\n            {topRated && topRated.length>0 && (\n                <Section title=\"Top Rated Shows\">\n                    {topRated.map(show => (\n                        <Poster \n                        key={show.id}\n                        id={show.id}\n                        title={show.original_name}\n                        imageUrl={show.poster_path}\n                        rating={show.vote_average}\n                        //date가 있을때만 substring하도록 하는 코드\n                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )} \n            {popular && popular.length>0 && (\n                <Section title=\"Popular Shows\">\n                    {popular.map(show => (\n                        <Poster \n                        key={show.id}\n                        id={show.id}\n                        title={show.original_name}\n                        imageUrl={show.poster_path}\n                        rating={show.vote_average}\n                        //date가 있을때만 substring하도록 하는 코드\n                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )} \n            {airingToday && airingToday.length>0 && (\n                <Section title=\"Airing Today\">\n                    {airingToday.map(show => (\n                        <Poster \n                        key={show.id}\n                        id={show.id}\n                        title={show.original_name}\n                        imageUrl={show.poster_path}\n                        rating={show.vote_average}\n                        //date가 있을때만 substring하도록 하는 코드\n                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )} \n            {/* error(string)가 존재하면 에러메세지를 보여준다.*/}\n            {error && <Message color=\"#F0483C\" text={error}/>}\n        </Container>\n    )}\n</Fragment>;\n\n\nTVPresenter.propTypes = {\n    topRated:PropTypes.array,\n    popular:PropTypes.array,\n    airingToday:PropTypes.array,\n    loading:PropTypes.bool.isRequired,\n    error:PropTypes.string\n};\n\nexport default TVPresenter ;","import TVContainer from \"./TVContainer\";\n\nexport default TVContainer;","import React from \"react\";\nimport TVPresenter from \"./TVPresenter\";\nimport {tvApi} from 'api';\n\nexport default class extends React.Component {\n  state = {\n    topRated: null,\n    popular: null,\n    airingToday: null,\n    loading: true,\n    error: null\n  };\n\n  componentDidMount = async() =>{\n    try{\n        //await해줘야 자바스크립트가 뒤에 요청을 기다려준다.\n        //data 안에 results 배열 가져옴 > nowPlaying 으로 이름변경 > setState!\n        const {data:{results : topRated}} = await tvApi.topRated();\n        const {data:{results : popular}} = await tvApi.popular();\n        const {data:{results : airingToday}} = await tvApi.airingToday();\n        this.setState({\n            topRated,\n            popular,\n            airingToday\n        });\n    }catch{\n        this.setState({\n            error:\"Can't find tv information.\"\n        })\n    }finally{\n        //리스트보여주기 or 에러문구 보여주기\n        this.setState({\n            loading:false\n        });\n    }\n}\n  render() {\n    const { topRated, popular, airingToday, loading, error } = this.state;\n    return (\n      <TVPresenter\n        topRated={topRated}\n        popular={popular}\n        airingToday={airingToday}\n        loading={loading}\n        error={error}\n      />\n    );\n  }\n}\n","import React,{Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Loader from 'Components/Loader';\nimport Section from 'Components/Section';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\nimport Helmet from 'react-helmet';\n\nconst Container = styled.div`\n    padding:20px;\n`;\nconst Form = styled.form`\n    margin-bottom:50px;\n    width:100%; \n`;\n\nconst Input = styled.input`\n    all:unset;\n    font-size:28px;\n    width:100%;\n`;\n//searchContainer한테 받는 props.\nconst SearchPresenter = ({\n    movieResults,tvResults,loading,error,searchTerm,handleSubmit,updateTerm\n}) => \n<Container>\n    <Helmet>\n        <title>Search | Nomflix</title>\n    </Helmet>\n    <Form onSubmit={handleSubmit}>\n        <Input \n        placeholder=\"Search Movie or TV show\"\n        value={searchTerm}\n        onChange={updateTerm}\n        >\n        </Input>\n    </Form>\n    {loading ? (<Loader />) : (\n        <Fragment>\n            {movieResults && movieResults.length>0 && (\n                <Section title=\"Movie Result\">\n                    {movieResults.map(movie=>(\n                        <Poster \n                        key={movie.id}\n                        id={movie.id}\n                        title={movie.original_title}\n                        imageUrl={movie.poster_path}\n                        rating={movie.vote_average}\n                        //date가 있을때만 substring하도록 하는 코드\n                        year={movie.release_date && movie.release_date.substring(0,4)}\n                        isMovie={true}\n                        />\n                    ))}\n                </Section>\n            )}\n            {tvResults && tvResults.length>0 && (\n                <Section title=\"TV Result\">\n                    {tvResults.map(show=>(\n                        <Poster \n                        key={show.id}\n                        id={show.id}\n                        title={show.original_name}\n                        imageUrl={show.poster_path}\n                        rating={show.vote_average}\n                        //date가 있을때만 substring하도록 하는 코드\n                        year={show.first_air_date && show.first_air_date.substring(0,4)}\n                        />\n                    ))}\n                </Section>\n            )}\n            {error && <Message color=\"#F0483C\" text={error}/>}\n            {tvResults && \n                movieResults && \n                tvResults.length === 0 &&\n                movieResults.length === 0 &&(\n                    <Message color=\"#F2F5FF\" text={`Nothing Found for \"${searchTerm}\"`} />\n                )}\n        </Fragment>\n    )}\n</Container>\n\nSearchPresenter.propTypes = {\n    movieResults:PropTypes.array,\n    tvResults:PropTypes.array,\n    loading:PropTypes.bool.isRequired,\n    error:PropTypes.string,\n    searchTerm:PropTypes.string,\n    handleSubmit:PropTypes.func,\n    updateTerm:PropTypes.func.isRequired\n};\n\nexport default SearchPresenter ;","import SearchContainer from \"./SearchContainer\";\n\nexport default SearchContainer;","import React from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { moviesApi,tvApi } from \"api\";\n\nexport default class extends React.Component {\n  state = {\n    movieResults: null,\n    tvResults: null,\n    searchTerm: \"\",\n    loading: false,\n    error: null\n  };\n\n  _handleSubmit = (e) => {\n    e.preventDefault();\n    const {searchTerm} = this.state;\n    if(searchTerm !== \"\"){\n      this._searchByTerm();\n    }\n  }\n  _searchByTerm = async() => {\n    const {searchTerm} = this.state;\n    this.setState({ loading:true });\n    try{\n      const {data:{results: movieResults}} = await moviesApi.search(searchTerm);\n      const {data:{results: tvResults}} = await tvApi.search(searchTerm);\n      this.setState({\n        movieResults,\n        tvResults\n      });\n      \n    }catch{\n      this.setState({ error: \"Can't find results.\" });\n    }finally{\n      this.setState({\n        loading: false\n      });\n    }\n  }\n  _updateTerm = (e)=> {\n    const {target :{value}} = e;\n    console.log(value);\n    this.setState({\n      searchTerm:value\n    });\n  };\n  render() {\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\n    return (\n      <SearchPresenter\n        movieResults={movieResults}\n        tvResults={tvResults}\n        searchTerm={searchTerm}\n        loading={loading}\n        error={error}\n        handleSubmit={this._handleSubmit}\n        updateTerm={this._updateTerm}\n      />\n    );\n  }\n}\n","import React,{Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Loader from 'Components/Loader';\nimport Helmet from 'react-helmet';\nimport Message from 'Components/Message';\n\nconst Container = styled.div`\n    height:calc(100vh - 50px);\n    width:100%;\n    position:relative;\n    padding:50px 100px;\n`;\nconst Backdrop = styled.div`\n    position:absolute;\n    top: 0;\n    left: 0;\n    width:100%;\n    height:100%;\n    background-image:url(${props => props.bgImage});\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size:cover;\n    filter:blur(2px);\n    opacity:0.5;\n    z-index:0;\n`;\nconst Content = styled.div`\n    display:flex;\n    width:100%;\n    height:100%;\n    position:relative;\n    z-index:1;\n`;\nconst Cover = styled.div`\n    width:30%; height:100%;\n    background-image:url(${props => props.bgImage});\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size:cover;\n    border-radius:5px;\n`;\nconst Data = styled.div`\n  width: 70%;\n  margin-left: 30px;\n  padding:30px 0;\n`;\n\nconst Title = styled.h3`\n  font-size: 32px;\n`;\n\nconst ItemContainer = styled.div`\n  margin: 20px 0;\n`;\n\nconst Item = styled.span``;\n\nconst Divider = styled.span`\n  margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n  font-size: 14px;\n  opacity: 0.7;\n  line-height: 1.5;\n  width: 50%;\n`;\n\nconst DetailPresenter = ({result, loading, error}) => (\n    loading? (\n        <Fragment>\n            <Helmet>\n                <title>Loading | Nomflix</title>\n            </Helmet>\n            <Loader />\n        </Fragment>\n        ) : (\n        error ? <Message color=\"#FFF52B\" text={error}/> : (\n            <Container>\n            <Helmet>\n                <title>\n                    {result.original_title? \n                    result.original_title : \n                    result.original_name } | Nomflix\n                </title>\n            </Helmet>\n            <Backdrop \n            bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`} \n            />\n            <Content>\n                <Cover \n                bgImage={result.poster_path ? \n                    `https://image.tmdb.org/t/p/original${result.poster_path}` \n                    : require(\"../../assets/noPosterSmall.png\")} />\n                <Data>\n                    <Title>{result.original_title? \n                        result.original_title : \n                        result.original_name }\n                    </Title>\n                    <ItemContainer>\n                        <Item>\n                            {result.release_date ? \n                            result.release_date.substring(0,4) : \n                            result.first_air_date.substring(0,4)}\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {result.runtime ? \n                            result.runtime : \n                            result.episode_run_time } min\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {result.genres &&\n                            result.genres.map((genre, index) =>\n                              index === result.genres.length - 1\n                                ? genre.name\n                                : `${genre.name} / `\n                            )}\n                        </Item>\n                    </ItemContainer>\n                    <Overview>{result.overview ? result.overview : null }</Overview>\n                </Data>\n            </Content>\n        </Container>\n        )\n    )\n);\nDetailPresenter.propTypes = {\n    result:PropTypes.object,\n    loading:PropTypes.bool.isRequired,\n    error:PropTypes.string\n};\n\nexport default DetailPresenter ;","import DetailContainer from \"./DetailContainer\";\n\nexport default DetailContainer;","import React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport {moviesApi, tvApi} from \"api\";\n\n//super(props) 선언전까지 constructor에서 this 키워드를 사용 할 수 없다.\nexport default class extends React.Component {\n  constructor(props){\n    super(props);\n    const {location:{pathname}} = props;\n    this.state={\n      result: null,\n      error: null,\n      loading: true,\n      //isMovie = true or false \n      isMovie: pathname.includes(\"/movie/\")\n    };\n  }\n\n  componentDidMount = async() => {\n    const {match:{params:{id}}, history:{push}} = this.props;\n    const {isMovie} = this.state; \n    let result = null;\n    const parsedId = parseInt(id);\n\n    try{\n      isMovie ? { data: result } = await moviesApi.movieDetail(parsedId) \n      : ({ data: result } = await tvApi.showDetail(parsedId))\n    }catch{\n      this.setState({ error: \"Can't find anything.\" });\n    }finally{\n      //result = null or movie or tv\n      this.setState({ loading: false, result });\n    }\n\n    if( isNaN(parsedId) ){\n      //id가 숫자가 아닌 글자면 홈으로 돌아가기. / return을 붙여줘야지 해당 함수가 종료된다. \n      return push(\"/\");\n    }\n  }\n  render() {\n    const { result, error, loading } = this.state;\n    console.log(result);\n    return <DetailPresenter result={result} error={error} loading={loading} />;\n  }\n}","import React from 'react';\n// import styles from './Header.module.css';\nimport styled from 'styled-components';\nimport {Link, withRouter } from 'react-router-dom';\n\nconst Header = styled.header`\n    color:white;\n    position:fixed;\n    top:0; left:0;\n    width:100%;\n    height:50px;\n    display:flex;\n    align-items:center;\n    padding:0 20px;\n    background-color:rgba(20,20,20,0.8);\n    z-index:10;\n    box-shadow:0 1px 5px 2px rgba(0,0,0,0.8);\n`;\nconst List = styled.ul`\n    display:flex;\n`;\nconst Item = styled.li`\n    width:80px; \n    height:50px;\n    text-align: center;\n    border-bottom:5px solid ${props => props.current ? \"#E87684\" : \"transparent\"};\n    transition: border-bottom .5s ease-in-out;\n`;\nconst SLink = styled(Link)`\n    height:50px;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n`;\nexport default withRouter(({location : {pathname}}) => (\n    <Header>\n        <List>\n            <Item current={pathname===\"/\"}>\n                <SLink to=\"/\">Movies</SLink>\n            </Item>\n            <Item current={pathname===\"/show\"}>\n                <SLink to=\"/show\">TV</SLink>\n            </Item>\n            <Item current={pathname===\"/search\"}>\n                <SLink to=\"/search\">Search</SLink>\n            </Item>\n        </List>\n    </Header>\n));\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\n//HashRouter - # or BrowserRouter 쓰기\nimport Home from 'Routes/Home';\nimport TV from 'Routes/TV';\nimport Search from 'Routes/Search';\nimport Detail from \"Routes/Detail\";\n//{Link}는 Router 밖에 위치할 수 없어서, App.js가 아닌, Router.js에 Header.js 넣어주기.\nimport Header from './Header'\n\nexport default () => (\n    <Router>\n        {/* \"Header는 Route가 아니기 때문에 Router로부터 location 정보를 받을 수 없다.\" \n            따라서, Detail내에서 location 설정을 할수있다. */}\n        <Header />\n        {/* switch 기능 > 한번에 하나의 Route만 render */}\n        <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/show\" exact component={TV} />\n            <Route path=\"/search\"  component={Search} />\n            <Route path=\"/movie/:id\" component={Detail} />\n            <Route path=\"/show/:id\" component={Detail} />\n            {/* 위에 맞는게 없으면 /로 Redirect */}\n            <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n    </Router>\n);\n\n/* <Route path=\"/tv/popular\" render={()=> <h1>Popular</h1>} /> */","import {createGlobalStyle} from 'styled-components';\nimport reset from 'styled-reset';\n\nconst globalStyles = createGlobalStyle `\n    ${reset};\n    a{\n        text-decoration : none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n    }\n    body{\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color:rgba(20,20,20,1);\n        color:white;\n        padding-top:50px;\n    }\n`;\n\nexport default globalStyles;","import React, { Component, Fragment} from 'react';\nimport Router from 'Components/Router';\nimport GlobalStyles from 'Components/GlobalStyles';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Router />\n        <GlobalStyles />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}